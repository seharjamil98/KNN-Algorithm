# -*- coding: utf-8 -*-
"""KNN-Iris-Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1amyix8n5R_zm2YVshmJJCAvoxoVyvRNK

**Data Pre-Processing**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.neighbors import KNeighborsClassifier
import numpy as nm
import matplotlib.pyplot as mtp
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler

df= pd.read_csv('Iris.csv')

df.Species.replace(('Iris-setosa', 'Iris-versicolor', 'Iris-virginica'),('0', '1', '2'), inplace=True)

df.shape

df.head(5)

df.describe()

df.groupby('Species').size()

"""**Dividing data into features and labels**"""

feature_columns = ['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm','PetalWidthCm']
X = df[feature_columns].values
y = df['Species'].values

"""**Spliting dataset into training set and test set**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""**Data Visualization** (Parallel Coordinates)"""

from pandas.plotting import parallel_coordinates
plt.figure(figsize=(10,5))
parallel_coordinates(df.drop("Id", axis=1), "Species")
plt.title('Parallel Coordinates Plot', fontsize=20, fontweight='bold')
plt.xlabel('Features', fontsize=15)
plt.ylabel('Features values', fontsize=15)
plt.legend(loc=1, prop={'size': 15}, frameon=True,shadow=True, facecolor="white", edgecolor="black")
plt.show()

"""**Andrews Curves**"""

from pandas.plotting import andrews_curves
plt.figure(figsize=(10,5))
andrews_curves(df.drop("Id", axis=1), "Species")
plt.title('Andrews Curves Plot', fontsize=20, fontweight='bold')
plt.legend(loc=1, prop={'size': 15}, frameon=True,shadow=True, facecolor="white", edgecolor="black")
plt.show()

"""**Pairplot**"""

plt.figure()
sns.pairplot(df.drop("Id", axis=1), hue = "Species", size=2, markers=["o", "s", "D"])
plt.show()

"""**Boxplots**"""

plt.figure()
df.drop("Id", axis=1).boxplot(by="Species", figsize=(10, 5))
plt.show()

"""**Find Accuracy**"""

k_range =range(1,18)
scores={}
scores_list=[]
for k in k_range:
  knn = KNeighborsClassifier(n_neighbors=k)
  knn.fit(X_train,y_train)
  Y_pred=knn.predict(X_test)
  scores[k] = metrics.accuracy_score(y_test,Y_pred)
  scores_list.append( metrics.accuracy_score(y_test,Y_pred))
scores